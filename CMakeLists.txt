CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(kernel)

FIND_PROGRAM(CMAKE_ASM_NASM_COMPILER NAMES yasm)

SET(USE_CROSS_COMPILE TRUE)
SET(CMAKE_FIND_ROOT_PATH  $ENV{HOME}/projects/justanotheros/cross)

if (EXISTS ${CMAKE_FIND_ROOT_PATH} AND USE_CROSS_COMPILE)
    SET(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

    SET(CMAKE_SYSTEM_NAME Generic)
    SET(CMAKE_SYSTEM_PROCESSOR i686)

    SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY)
    SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
    SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

    SET(CMAKE_C_COMPILER   ${CMAKE_FIND_ROOT_PATH}/bin/i686-elf-gcc)
    SET(CMAKE_CXX_COMPILER ${CMAKE_FIND_ROOT_PATH}/bin/i686-elf-g++)
    SET(CMAKE_LINKER       ${CMAKE_FIND_ROOT_PATH}/bin/i686-elf-ld)
endif()

MESSAGE("Path: ${CMAKE_FIND_ROOT_PATH}")
MESSAGE("C Compiler: ${CMAKE_C_COMPILER}")
MESSAGE("CXX Compiler: ${CMAKE_CXX_COMPILER}")
MESSAGE("Linker: ${CMAKE_LINKER}")

ENABLE_LANGUAGE(ASM_NASM)

SET(CMAKE_ASM_NASM_COMPILE_OBJECT "<CMAKE_ASM_NASM_COMPILER> <INCLUDES> <FLAGS> -o <OBJECT> <SOURCE>")
SET(CMAKE_C_LINK_EXECUTABLE "<CMAKE_LINKER> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")

SET(CMAKE_ASM_NASM_FLAGS_RELEASE "")
SET(CMAKE_ASM_NASM_FLAGS_DEBUG "-g dwarf2")
SET(CMAKE_ASM_NASM_FLAGS "-felf")

SET(CMAKE_C_STANDARD 99)
SET(CMAKE_C_FLAGS_RELEASE "-O0")
SET(CMAKE_C_FLAGS_DEBUG "-g3 -O0")
SET(CMAKE_C_FLAGS "-m32 -fno-pic -fno-pie -ffreestanding -fno-builtin -nostdlib -nostdinc -fno-stack-protector -fno-asynchronous-unwind-tables -Wall -Wextra")
SET(CMAKE_LINKER_FLAGS "-melf_i386")

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} -T ${CMAKE_CURRENT_SOURCE_DIR}/link.ld")

FILE(GLOB_RECURSE SRC_FILES "src/*.c")
FILE(GLOB_RECURSE ASM_FILES "src/*.s")

INCLUDE_DIRECTORIES(include)

SET_SOURCE_FILES_PROPERTIES(${ASM_FILES} PROPERTIES LANGUAGE ASM_NASM)
ADD_EXECUTABLE(${PROJECT_NAME} ${ASM_FILES} ${SRC_FILES})